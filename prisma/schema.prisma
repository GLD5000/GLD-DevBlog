// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Post {
  createdAt DateTime @default(dbgenerated("CURRENT_DATE"))
  updatedAt DateTime @updatedAt
  id        String    @id @default(cuid())
  title     String
  content   String?
  readTime  Int  @default(1)
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  authorId  String?
  tags   TagOnPosts[]
}

model Tag {
  id                String    @id @default(cuid())
  name              String @unique
  backgroundColour  String @default("#757575")
  posts             TagOnPosts[]
}

model TagOnPosts {
  id           Int    @id @default(autoincrement())
  post         Post   @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tag          Tag    @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId       String
  tagId        String

  @@unique([postId, tagId], name: "unique_post_tag")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String? @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
